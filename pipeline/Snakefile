# download swiss protein db from: https://ftp.uniprot.org/pub/databases/uniprot/current_release/knowledgebase/complete/uniprot_sprot.fasta.gz
DB_FILE = "data/uniprot_sprot.fasta"
CLUSTER = ""
DIAMOND_PATH = "./../../diamond-2.0.8"
RAXML_PATH = "./../../raxml-ng"
MUSCLE_PATH = "./../../muscle"
# Minimum identity-% to report an alignment
MIN_IDENTITY = "40"
# multi-step or mcl
CLUSTER_ALGO = "multi-step"


# removes path and file extension from filename
def clean_filename(filename):
    return filename.split("/")[-1].split(".")[0]

DB_FILENAME = clean_filename(DB_FILE)
WORK_DIR = f"data/{DB_FILENAME}.{MIN_IDENTITY}.{CLUSTER_ALGO}.clusters"
CLUSTER_IDS, = glob_wildcards(WORK_DIR + "/clean/{id}.clean.fasta")

def agg_input(wildcards):
    checkpoint_output = checkpoints.separate_clusters.get(**wildcards).output[1]
    CLUSTER_IDS, = glob_wildcards(os.path.join(checkpoint_output, "{id}.clean.fasta"))
    a = expand(WORK_DIR + "/clean/{i}.clean.fasta", i=CLUSTER_IDS)
    return a

rule msa:
    input:
        WORK_DIR + "/info.txt",
        expand(WORK_DIR + "/msa/{id}.fasta", id=CLUSTER_IDS)
    run:
        # For some reason it runs general rule below only if we have some dummy code here???
        print("Done!")

rule:
    input:
        WORK_DIR + "/clean/{id}.clean.fasta"
    output:
        WORK_DIR + "/msa/{id}.fasta"
    shell:
        "{MUSCLE_PATH}/muscle3.8.31_i86darwin64 -in {input} -out {output}"

checkpoint separate_clusters:
    input:
        f"{DB_FILE}",
        f"data/{DB_FILENAME}.{MIN_IDENTITY}.{CLUSTER_ALGO}"
    output:
        WORK_DIR + "/info.txt",
        directory(f"{WORK_DIR}/clean"),
        directory(f"{WORK_DIR}/fasta")
    params:
        min_size = 95,
        max_size = 100
    shell:
        "python3 scripts/clusteread.py a {input} {params.min_size} {params.max_size}"


rule diamond_bin_db:
    input:
        f"{DB_FILE}"
    output:
        f"data/{DB_FILENAME}.dmnd"
    shell:
        "{DIAMOND_PATH}/bin/diamond makedb --in {input} -d {output}"

rule diamond_cluster:
    input:
        f"data/{DB_FILENAME}.dmnd"
    output:
        f"data/{DB_FILENAME}.{MIN_IDENTITY}.{CLUSTER_ALGO}"
    params:
        id=MIN_IDENTITY,
        algo=CLUSTER_ALGO,
        # id > 70%          : --fast
        # 40% < id < 70%    : --sensitive
        # 25% < id < 40%    : --very-sensitive
        # id < 25%          : --ultra-sensitive
        sens="--sensitive"
    shell:
        "{DIAMOND_PATH}/bin/diamond cluster --cluster-algo {params.algo} --id {params.id} {params.sens} -d {input} -o {output}"

rule cluster_info:
    input:
        f"{DB_FILE}",
        f"data/{DB_FILENAME}.{MIN_IDENTITY}.{CLUSTER_ALGO}"
    params:
        cluster_name=CLUSTER
    shell:
        "python3 scripts/clusteread.py i {input}"

rule separate_cluster:
    input:
        f"{DB_FILE}",
        f"data/{DB_FILENAME}.{MIN_IDENTITY}.{CLUSTER_ALGO}"
    output:
        f"out/{CLUSTER}.fasta",
        f"out/{CLUSTER}.clean.fasta"
    params:
        cluster_name=CLUSTER
    shell:
        "python3 scripts/clusteread.py w {input} \"{params.cluster_name}\""



rule muscle:
    input:
        f"out/{CLUSTER}.clean.fasta"
    output:
        f"out/{CLUSTER}.msa.fasta"
    shell:
        "{MUSCLE_PATH}/muscle3.8.31_i86darwin64 -in \"{input}\" -out \"{output}\""


rule raxml_check:
    input:
        f"out/{CLUSTER}.msa.fasta"
    output:
        f"out/{CLUSTER}.raxml.rba"
    params:
        cluster_name=CLUSTER
    shell:
        "{RAXML_PATH}/bin/raxml-ng --parse --msa \"{input}\" --model LG+G --prefix \"./out/{params.cluster_name}\""

rule raxml:
    input:
        f"out/{CLUSTER}.raxml.rba"
    output:
        f"out/{CLUSTER}.raxml.bestTree"
    params:
        cluster_name=CLUSTER
    shell:
        "{RAXML_PATH}/bin/raxml-ng --msa \"{input}\" LG+G --prefix \"./out/{params.cluster_name}\""    

rule raxml_stats:
    input:
        f"out/{CLUSTER}.raxml.bestTree"
    shell:
        "python3 scripts/raxml_stats.py \"{input}\""

rule taxtree:
    input:
        f"out/{CLUSTER}.fasta"
    output:
        f"out/{CLUSTER}.tax.tree"
    shell:
        "python3 scripts/taxtree.py \"{input}\""


    